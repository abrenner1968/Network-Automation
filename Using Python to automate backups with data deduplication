Use whichever editing software you are comfortable with. My preferred is Notepad++. Save the file as something such as backup_with_deduplication.py

import os
import shutil
import hashlib

def file_hash(file_path, block_size=65536):
    # Calculate hash of a file
    hasher = hashlib.sha256()
    with open(file_path, 'rb') as file:
        buffer = file.read(block_size)
        while len(buffer) > 0:
            hasher.update(buffer)
            buffer = file.read(block_size)
    return hasher.hexdigest()

def backup_with_deduplication(source_dir, destination_dir):
    # Dictionary to store hash values and corresponding file paths
    hash_dict = {}

    # Walk through the source directory
    for root, _, files in os.walk(source_dir):
        for filename in files:
            file_path = os.path.join(root, filename)
            file_hash_value = file_hash(file_path)

            # Check if the hash value already exists in the dictionary
            if file_hash_value in hash_dict:
                # If file already exists, skip copying
                print(f"Skipping {file_path} as it is a duplicate.")
            else:
                # Otherwise, copy the file to the destination directory
                destination_path = os.path.join(destination_dir, filename)
                shutil.copy2(file_path, destination_path)
                print(f"Copied {file_path} to {destination_path}")

                # Update hash dictionary
                hash_dict[file_hash_value] = destination_path

# Example usage:
source_directory = "/path/to/source_directory"
destination_directory = "/backup_with_deduplication.py"

backup_with_deduplication(/blob_storage/main, 10.0.1.5/blob_storage/dr)

Be sure to add the following cron job to activate the python file above at the same time nightly. In my case, I did this at 1am, the same time I have the router interface that services the end users shut down. Save it as something like forcebackupnightly.py

import schedule
import time
import subprocess

def activate_script(script_path):
    try:
        # Run the script using subprocess
        subprocess.run(["python", script_path])
        print(f"Activated {\}")
    except Exception as e:
        print(f"Failed to activate {\}: {e}")

def daily_activation():
    script_to_activate = "/backup_with_deduplication.py"
    activate_script(script_to_activate)

# Schedule the activation to occur daily at a specific time
schedule.every().day.at("01:00").do(daily_activation)

# Main loop to keep the script running
while True:
    schedule.run_pending()
    time.sleep(60)  # Check every minute if there's a scheduled task to run


